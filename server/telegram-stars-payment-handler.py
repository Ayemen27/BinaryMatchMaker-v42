from aiogram import Bot, Dispatcher, Router, F
import logging
import asyncio
from aiogram.filters import Command
from aiogram.types import (
    Message, 
    LabeledPrice, 
    PreCheckoutQuery,
    SuccessfulPayment
)
from dotenv import load_dotenv
import os
import json
import re

# ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
load_dotenv()

# ุงูุญุตูู ุนูู ุชููู ุงูุจูุช ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("ูู ูุชู ุงูุนุซูุฑ ุนูู TELEGRAM_BOT_TOKEN ูู ููู .env")

# ุฃุณุนุงุฑ ุงูุฎุทุท ุจุงููุฌูู
PLAN_PRICES = {
    "weekly": 750,
    "monthly": 2300,
    "annual": 10000,
    "premium": 18500
}

# ูุนุงูุฌ ุงูุฎุทุฃ ููุณุฌูุงุช
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("ูุธุงู ุฏูุน ูุฌูู ุชูุฌุฑุงู")

# ุฅูุดุงุก ุงูุจูุช ูุงููุฑุณู
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# ูุนุงูุฌุฉ ุฃูุฑ ุงูุจุฏุก
@router.message(Command('start'))
async def handle_start(message: Message):
    try:
        # ุงูุชุญูู ุฅุฐุง ูุงู ุฃูุฑ ุงูุจุฏุก ูุญุชูู ุนูู ูุนูููุงุช ุงูุฏูุน
        command_text = message.text
        pay_match = re.search(r'/start pay_(\w+)_(\d+)_(\d+)_(\w+)', command_text)
        
        if pay_match:
            # ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุฏูุน ูู ุงูุฃูุฑ
            plan_type = pay_match.group(1)
            stars_amount = int(pay_match.group(2))
            user_id = pay_match.group(3)
            username = pay_match.group(4)
            
            logger.info(f"ูุนุงูุฌุฉ ุทูุจ ุฏูุน: ุงูุฎุทุฉ={plan_type}, ุงููุฌูู={stars_amount}, ุงููุณุชุฎุฏู={username}")
            
            # ุงูุชุฃูุฏ ูู ูุฌูุฏ ุงูุฎุทุฉ ูุงูุณุนุฑ
            if plan_type in PLAN_PRICES:
                # ุชุฃูุฏ ูู ุฃู ุงููุจูุบ ุตุญูุญ
                plan_price = PLAN_PRICES[plan_type]
                if stars_amount == plan_price:
                    # ุฅูุดุงุก ูุงุชูุฑุฉ ุงูุฏูุน
                    await create_payment_invoice(message, plan_type, stars_amount, user_id, username)
                    return
                else:
                    logger.warning(f"ุณุนุฑ ุงูุฎุทุฉ ุบูุฑ ูุชุทุงุจู: ูุชููุน={plan_price}, ูุณุชูู={stars_amount}")
            else:
                logger.warning(f"ููุน ุงูุฎุทุฉ ุบูุฑ ูุนุฑูู: {plan_type}")
        
        # ุฑุณุงูุฉ ุชุฑุญูุจ ุนุงุฏูุฉ ุฅุฐุง ูู ููู ููุงู ุทูุจ ุฏูุน
        await message.answer(
            "๐ ูุฑุญุจูุง ุจู ูู ุจูุช BinarJoin Analytics ููุฏูุน!\n\n"
            "ูุฐุง ุงูุจูุช ูุฎุตุต ูุฅุฏุงุฑุฉ ุงุดุชุฑุงูุงุช ููุตุฉ BinarJoin Analytics.\n"
            "ููุงุดุชุฑุงูุ ูุฑุฌู ุฒูุงุฑุฉ ุตูุญุฉ ุงูุงุดุชุฑุงูุงุช ูู ุงูููุตุฉ ูุงุฎุชูุงุฑ ุงูุฎุทุฉ ุงูููุงุณุจุฉ ูู."
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุฃูุฑ ุงูุจุฏุก: {e}")
        await message.answer("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุทูุจ. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญููุง.")

# ุฅูุดุงุก ูุงุชูุฑุฉ ุฏูุน ุงููุฌูู
async def create_payment_invoice(message, plan_type, stars_amount, user_id, username):
    try:
        plan_descriptions = {
            "weekly": "ุฎุทุฉ ุงุดุชุฑุงู ุฃุณุจูุนูุฉ ูู ููุตุฉ BinarJoin Analytics",
            "monthly": "ุฎุทุฉ ุงุดุชุฑุงู ุดูุฑูุฉ ูู ููุตุฉ BinarJoin Analytics",
            "annual": "ุฎุทุฉ ุงุดุชุฑุงู ุณูููุฉ ูู ููุตุฉ BinarJoin Analytics",
            "premium": "ุฎุทุฉ ุงุดุชุฑุงู ูููุฒุฉ ูู ููุตุฉ BinarJoin Analytics"
        }
        
        plan_titles = {
            "weekly": "ุงูุงุดุชุฑุงู ุงูุฃุณุจูุนู",
            "monthly": "ุงูุงุดุชุฑุงู ุงูุดูุฑู",
            "annual": "ุงูุงุดุชุฑุงู ุงูุณููู",
            "premium": "ุงูุงุดุชุฑุงู ุงููููุฒ"
        }
        
        # ุฅูุดุงุก ูุตู ูููุงุชูุฑุฉ
        title = plan_titles.get(plan_type, "ุงุดุชุฑุงู BinarJoin Analytics")
        description = plan_descriptions.get(plan_type, "ุงุดุชุฑุงู ูู ููุตุฉ BinarJoin Analytics ููุชุญููู ุงูููู")
        
        # ุฅูุดุงุก ุงูุจูุงูุงุช ุงูุชู ุณูุชู ุฅุฑุณุงููุง ูุน ุงููุงุชูุฑุฉ
        payload = json.dumps({
            "planType": plan_type,
            "userId": user_id,
            "username": username,
            "paymentMethod": "telegram_stars"
        })
        
        logger.info(f"ุฅูุดุงุก ูุงุชูุฑุฉ ุฏูุน: {title}, {stars_amount} ูุฌูุฉ")
        
        # ุฅุฑุณุงู ุงููุงุชูุฑุฉ ูููุณุชุฎุฏู
        await message.answer_invoice(
            title=title,
            description=description,
            payload=payload,
            provider_token="",  # ูุง ุญุงุฌุฉ ูุชููู ุงููุฒูุฏ ุนูุฏ ุงุณุชุฎุฏุงู ูุฌูู ุชูุฌุฑุงู
            currency="XTR",  # ุฑูุฒ ุงูุนููุฉ ููุฌูู ุชูุฌุฑุงู
            prices=[
                LabeledPrice(label=title, amount=stars_amount)
            ],
            start_parameter=f"pay_{plan_type}_{stars_amount}"
        )
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ูุงุชูุฑุฉ ุงูุฏูุน: {e}")
        await message.answer("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ูุงุชูุฑุฉ ุงูุฏูุน. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญููุง.")

# ูุนุงูุฌุฉ ุทูุจุงุช ุงูุชุญูู ูู ุงูุฏูุน
@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    try:
        logger.info(f"ุงูุชุญูู ูู ุงูุฏูุน ูุจู ุงูุฅุชูุงู: {pre_checkout_query.id}")
        
        # ููุง ููููู ุฅุถุงูุฉ ููุทู ุฅุถุงูู ููุชุญูู ุฅุฐุง ูุฒู ุงูุฃูุฑ
        # ูุซู ุงูุชุฃูุฏ ูู ุชููุฑ ุงูููุชุฌ ุฃู ุงูุชุญูู ูู ุงูุจูุงูุงุช
        
        # ุงูููุงููุฉ ุนูู ุทูุจ ุงูุฏูุน
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุทูุจ ุงูุชุญูู ูู ุงูุฏูุน: {e}")
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฏูุน. ูุฑุฌู ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญููุง."
        )

# ูุนุงูุฌุฉ ุนูููุงุช ุงูุฏูุน ุงููุงุฌุญุฉ
@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    try:
        payment = message.successful_payment
        logger.info(f"ุชู ุงุณุชูุงู ุฏูุน ูุงุฌุญ: {payment.telegram_payment_charge_id}")
        
        # ุงุณุชุฎุฑุงุฌ ุจูุงูุงุช ุงูุฏูุน
        payment_data = json.loads(payment.invoice_payload)
        plan_type = payment_data.get("planType")
        user_id = payment_data.get("userId")
        username = payment_data.get("username")
        
        # ุฅุฑุณุงู ุชุฃููุฏ ูููุณุชุฎุฏู
        await message.answer(
            f"โ ุชู ุงูุฏูุน ุจูุฌุงุญ!\n\n"
            f"โข ุงูุฎุทุฉ: {plan_type}\n"
            f"โข ุงููุจูุบ: {payment.total_amount} ูุฌูุฉ\n"
            f"โข ูุนุฑู ุงููุนุงููุฉ: {payment.telegram_payment_charge_id}\n\n"
            f"ุชู ุชูุนูู ุงุดุชุฑุงูู ุจูุฌุงุญ ูู ููุตุฉ BinarJoin Analytics."
        )
        
        # ููุง ููููู ุฅุถุงูุฉ ููุทู ูุชุญุฏูุซ ุงูุงุดุชุฑุงู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        # ูุซู ุชุญุฏูุซ ุญุงูุฉ ุงูุงุดุชุฑุงู ูุชุงุฑูุฎ ุงูุชูุงุฆู
        logger.info(f"ุชู ุชูุนูู ุงุดุชุฑุงู ุงููุณุชุฎุฏู: {username}, ุงูุฎุทุฉ: {plan_type}")
        
        # TODO: ุฃุถู ููุง ุงุณุชุฏุนุงุก API ูุชุญุฏูุซ ุญุงูุฉ ุงูุงุดุชุฑุงู
        
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฏูุน ุงููุงุฌุญ: {e}")
        await message.answer("ุชู ุงุณุชูุงู ุงูุฏูุน ุจูุฌุงุญุ ูููู ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญุฏูุซ ุงุดุชุฑุงูู. ุณูุชู ุงูุชูุงุตู ูุนู ูุฑูุจูุง.")

# ุชุดุบูู ุงูุจูุช
async def main():
    logger.info("ุจุฏุก ุชุดุบูู ุจูุช ุฏูุน ูุฌูู ุชูุฌุฑุงู")
    dp.include_router(router)
    await dp.start_polling(bot)
    
if __name__ == "__main__":
    try:
        logger.info("ุจูุช ุฏูุน ูุฌูู ุชูุฌุฑุงู ููุฏ ุงูุชุดุบูู")
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("ุชู ุฅููุงู ุงูุจูุช")
    except Exception as e:
        logger.error(f"ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")