from aiogram import Router, F, Bot, Dispatcher
import logging
import asyncio
import sys
import os
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message, 
    LabeledPrice, 
    PreCheckoutQuery,
)
from dotenv import load_dotenv

# ุชุญููู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
load_dotenv()

# ุงูุญุตูู ุนูู ุชููู ุงูุจูุช ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    print("ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู ุชููู ุงูุจูุช ูู ููู .env")
    sys.exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher()

router = Router()

# ูุงููุณ ูุชุฎุฒูู ุฃุณุนุงุฑ ุงูุฎุทุท
PLAN_PRICES = {
    "weekly": 750,
    "monthly": 2300,
    "annual": 10000,
    "premium": 18500
}

@router.message(CommandStart())
async def handle_start(msg: Message):
    # ุงูุชุญูู ูู ูุฌูุฏ ูุนููุงุช ูู ุฃูุฑ ุงูุจุฏุก
    start_param = msg.text.split()
    
    if len(start_param) > 1 and start_param[1].startswith("pay_"):
        # ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุฏูุน ูู ูุนููุฉ ุงูุจุฏุก
        try:
            _, plan_type, stars_amount = start_param[1].split("_")
            stars_amount = int(stars_amount)
            await process_payment(msg, plan_type, stars_amount)
        except (ValueError, IndexError):
            await msg.answer("ุญุฏุซ ุฎุทุฃ ูู ูุนุงูุฌุฉ ูุนููุงุช ุงูุฏูุน. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.")
    else:
        # ุฑุณุงูุฉ ุชุฑุญูุจ ุงูุชุฑุงุถูุฉ
        await msg.answer(
            "ูุฑุญุจูุง ุจู ูู ุจูุช ุฏูุน ุงููุฌูู ูู BinarJoin Analytics! ๐\n\n"
            "ุงุณุชุฎุฏู ุงูุฃูุฑ /pay <ููุน_ุงูุฎุทุฉ> <ุนุฏุฏ_ุงููุฌูู> ููุจุฏุก ูู ุนูููุฉ ุงูุฏูุน.\n"
            "ูุซุงู: /pay weekly 750\n\n"
            "ุงูุฎุทุท ุงููุชุงุญุฉ:\n"
            "- weekly: 750 ูุฌูุฉ\n"
            "- monthly: 2300 ูุฌูุฉ\n"
            "- annual: 10000 ูุฌูุฉ\n"
            "- premium: 18500 ูุฌูุฉ"
        )

@router.message(Command('pay'))
async def pay_command(msg: Message):
    # ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุฎุทุฉ ูุนุฏุฏ ุงููุฌูู ูู ุงูุฃูุฑ
    command_parts = msg.text.split()
    
    if len(command_parts) < 3:
        await msg.answer(
            "ุงูุฑุฌุงุก ุชุญุฏูุฏ ููุน ุงูุฎุทุฉ ูุนุฏุฏ ุงููุฌูู.\n"
            "ูุซุงู: /pay weekly 750"
        )
        return
    
    plan_type = command_parts[1].lower()
    
    try:
        stars_amount = int(command_parts[2])
    except ValueError:
        await msg.answer("ุนุฏุฏ ุงููุฌูู ูุฌุจ ุฃู ูููู ุฑูููุง ุตุญูุญูุง.")
        return
    
    await process_payment(msg, plan_type, stars_amount)

async def process_payment(msg: Message, plan_type: str, stars_amount: int):
    """ูุนุงูุฌุฉ ุนูููุฉ ุงูุฏูุน ูุฅุฑุณุงู ูุงุชูุฑุฉ ูููุณุชุฎุฏู"""
    
    # ุงูุชุญูู ูู ุตุญุฉ ููุน ุงูุฎุทุฉ
    if plan_type not in PLAN_PRICES:
        await msg.answer(
            "ููุน ุงูุฎุทุฉ ุบูุฑ ุตุงูุญ. ุงูุฎุทุท ุงููุชุงุญุฉ ูู:\n"
            "- weekly\n"
            "- monthly\n"
            "- annual\n"
            "- premium"
        )
        return
    
    # ุนูุงููู ุงูุฎุทุท ุจุงูุนุฑุจูุฉ
    plan_titles = {
        "weekly": "ุงุดุชุฑุงู ุฃุณุจูุนู",
        "monthly": "ุงุดุชุฑุงู ุดูุฑู",
        "annual": "ุงุดุชุฑุงู ุณููู",
        "premium": "ุงุดุชุฑุงู ุจุฑููููู"
    }
    
    # ุงูุชุญูู ูู ุตุญุฉ ุนุฏุฏ ุงููุฌูู
    expected_stars = PLAN_PRICES[plan_type]
    if stars_amount != expected_stars:
        await msg.answer(
            f"ุนุฏุฏ ุงููุฌูู ุบูุฑ ุตุญูุญ ููุฎุทุฉ {plan_type}.\n"
            f"ุงูุนุฏุฏ ุงููุทููุจ ูู {expected_stars} ูุฌูุฉ."
        )
        return
    
    # ุฅูุดุงุก ูุตู ุงููุงุชูุฑุฉ
    plan_description = {
        "weekly": "ุงุดุชุฑุงู ุฃุณุจูุนู ูู BinarJoin Analytics - ุชุญูููุงุช ูุชูุฏูุฉ ูุฅุดุงุฑุงุช ุชุฏุงูู ููุฏุฉ ุฃุณุจูุน",
        "monthly": "ุงุดุชุฑุงู ุดูุฑู ูู BinarJoin Analytics - ุชุญูููุงุช ูุชูุฏูุฉ ูุฅุดุงุฑุงุช ุชุฏุงูู ููุฏุฉ ุดูุฑ",
        "annual": "ุงุดุชุฑุงู ุณููู ูู BinarJoin Analytics - ุชุญูููุงุช ูุชูุฏูุฉ ูุฅุดุงุฑุงุช ุชุฏุงูู ููุฏุฉ ุณูุฉ",
        "premium": "ุงุดุชุฑุงู ุจุฑููููู ูู BinarJoin Analytics - ุฌููุน ุงูููุฒุงุช ุงููุชูุฏูุฉ ููุฏุฉ ุณูุฉ"
    }
    
    # ุฅูุดุงุก ูุนุฑู ูุฑูุฏ ููุฏูุน
    payment_id = f"bj_{plan_type}_{msg.from_user.id}_{int(asyncio.get_event_loop().time())}"
    
    # ุฅุฑุณุงู ูุงุชูุฑุฉ ุงูุฏูุน
    try:
        await msg.answer_invoice(
            title=plan_titles.get(plan_type, f"ุงุดุชุฑุงู {plan_type}"),
            description=plan_description.get(plan_type, "ุงุดุชุฑุงู ูู ุฎุฏูุฉ BinarJoin Analytics"),
            payload=payment_id,
            provider_token=TOKEN,
            currency="XTR",  # ุฑูุฒ ุนููุฉ ูุฌูู ุชููุฌุฑุงู
            prices=[
                LabeledPrice(label=f"ุงุดุชุฑุงู {plan_type}", amount=stars_amount),
            ],
            start_parameter=f"payment_{plan_type}_{stars_amount}"
        )
        
        # ุฅุฑุณุงู ุชุนูููุงุช ุฅุถุงููุฉ ูููุณุชุฎุฏู
        await msg.answer(
            "ุชู ุฅูุดุงุก ูุงุชูุฑุฉ ุงูุฏูุน. ูุฑุฌู ุฅููุงู ุนูููุฉ ุงูุฏูุน ุฎูุงู ุงููุงุชูุฑุฉ ุฃุนูุงู.\n"
            "ุจุนุฏ ุฅุชูุงู ุงูุฏูุนุ ุณูุชู ุชูุนูู ุงุดุชุฑุงูู ุชููุงุฆููุง."
        )
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฅูุดุงุก ูุงุชูุฑุฉ ุงูุฏูุน: {e}")
        await msg.answer("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅูุดุงุก ูุงุชูุฑุฉ ุงูุฏูุน. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู ูุงุญููุง.")


@router.pre_checkout_query()
async def checkout_handler(checkout_query: PreCheckoutQuery):
    """ุงูุชุญูู ูู ุตุญุฉ ุนูููุฉ ุงูุฏูุน ูุจู ุฅุชูุงููุง"""
    try:
        # ูููู ุฅุถุงูุฉ ุชุญููุงุช ุฅุถุงููุฉ ููุง ูุจู ูุจูู ุงูุฏูุน
        
        # ูุจูู ุนูููุฉ ุงูุฏูุน
        await checkout_query.answer(ok=True)
        
        logging.info(f"ุชู ูุจูู ุนูููุฉ ุงูุฏูุน: {checkout_query.id}")
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุชุญูู ูู ุงูุฏูุน: {e}")
        await checkout_query.answer(ok=False, error_message="ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฏูุน. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู.")


@router.message(F.successful_payment)
async def handle_successful_payment(msg: Message):
    """ูุนุงูุฌุฉ ุงูุฏูุน ุงููุงุฌุญ"""
    try:
        payment_info = msg.successful_payment
        payload = payment_info.invoice_payload
        
        # ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุฎุทุฉ ูู ูุนุฑู ุงูุฏูุน
        _, plan_type, user_id, _ = payload.split("_")
        
        # ุฅุฑุณุงู ุชุฃููุฏ ูุฌุงุญ ุงูุฏูุน ูููุณุชุฎุฏู
        await msg.answer(
            f"๐ ุชู ุงุณุชูุงู ุฏูุนุฉ {payment_info.total_amount} ูุฌูุฉ ุจูุฌุงุญ!\n\n"
            f"ูุนุฑู ุงููุนุงููุฉ: {payment_info.telegram_payment_charge_id}\n"
            f"ููุน ุงูุฎุทุฉ: {plan_type}\n\n"
            "ุณูุชู ุชูุนูู ุงุดุชุฑุงูู ุฎูุงู ุฏูุงุฆู. ุดูุฑูุง ูุงุฎุชูุงุฑู BinarJoin Analytics!"
        )
        
        # ููุง ูููู ุฅุถุงูุฉ ููุทู ูุชุญุฏูุซ ุงุดุชุฑุงู ุงููุณุชุฎุฏู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        # ูุซู ุฅุฑุณุงู ุทูุจ ุฅูู ูุงุฌูุฉ ุจุฑูุฌุฉ ุงูุชุทุจูู ุงูุฎุงุตุฉ ุจุงูุฎุงุฏู
        
        logging.info(f"ุฏูุน ูุงุฌุญ: {payload} - ุงููุณุชุฎุฏู: {msg.from_user.id} - ุงููุจูุบ: {payment_info.total_amount}")
        
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุฏูุน ุงููุงุฌุญ: {e}")
        await msg.answer("ุชู ุงุณุชูุงู ุงูุฏูุนุ ูููู ุญุฏุซ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุชูุนูู ุงูุงุดุชุฑุงู. ุณูุชูุงุตู ูุฑูู ุงูุฏุนู ูุนู ูุฑูุจูุง.")


@router.message(Command('help'))
async def help_command(msg: Message):
    """ุฅุฑุณุงู ุฑุณุงูุฉ ูุณุงุนุฏุฉ"""
    await msg.answer(
        "๐ ููููุฉ ุงุณุชุฎุฏุงู ุจูุช ุฏูุน ุงููุฌูู:\n\n"
        "1. ุงุณุชุฎุฏู ุงูุฃูุฑ /pay <ููุน_ุงูุฎุทุฉ> <ุนุฏุฏ_ุงููุฌูู> ููุจุฏุก ูู ุนูููุฉ ุงูุฏูุน.\n"
        "   ูุซุงู: /pay weekly 750\n\n"
        "2. ุงุถุบุท ุนูู ุฒุฑ ุงูุฏูุน ูู ุงููุงุชูุฑุฉ ุงูุชู ุณูุชู ุฅุฑุณุงููุง.\n\n"
        "3. ุฃููู ุนูููุฉ ุงูุฏูุน ุจุงุณุชุฎุฏุงู ูุฌูู ุชููุฌุฑุงู.\n\n"
        "4. ุจุนุฏ ูุฌุงุญ ุงูุฏูุนุ ุณูุชู ุชูุนูู ุงุดุชุฑุงูู ุชููุงุฆููุง.\n\n"
        "ุงูุฎุทุท ุงููุชุงุญุฉ:\n"
        "- weekly: 750 ูุฌูุฉ (ุฃุณุจูุนู)\n"
        "- monthly: 2300 ูุฌูุฉ (ุดูุฑู)\n"
        "- annual: 10000 ูุฌูุฉ (ุณููู)\n"
        "- premium: 18500 ูุฌูุฉ (ุจุฑููููู)\n\n"
        "ุฅุฐุง ูุงุฌูุช ุฃู ูุดููุฉุ ูุฑุฌู ุงูุชูุงุตู ูุน ูุฑูู ุงูุฏุนู."
    )


async def main():
    """ุชุดุบูู ุงูุจูุช"""
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    print('ุชู ุจุฏุก ุชุดุบูู ุจูุช ุฏูุน ุงููุฌูู')
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('ุชู ุฅููุงู ุงูุจูุช')